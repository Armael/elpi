% elpi: embedded lambda Prolog interpreter
% license: GNU Lesser General Public License Version 2.1 or later

accumulate builtins.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lambda Prolog standard predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred true.
true.

pred fail.
pred false.

pred (=) o:A, o:A.
X = X.

(A ; _) :- A.
(_ ; B) :- B.

pred not i:prop.
not X :- X, !, fail.
not _.
stop :- halt.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Type annotations for constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type (::) X -> list X -> list X.
type ([]) list X.
type (:-) prop -> prop -> prop.
type (:-) prop -> list prop -> prop.
type (,) variadic prop prop.
type uvar A.
type (as) A -> A -> A.
type (-) A -> A -> A.
type (=>) prop -> prop -> prop.
type (=>) list prop -> prop -> prop.
type (^) string -> string -> string.
type (+) int -> int -> int.
type (*) int -> int -> int.
type std_in @in_stream.
type std_out @out_stream.

% vim: set ft=lprolog:

