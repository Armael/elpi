mode (term i o).
term (app HD ARG) TGT :- term HD (arr SRC TGT), term ARG SRC.
term (lam F) (arr SRC TGT) :- pi x\ term x SRC => term (F x) TGT.
term (?? as X) T :- declare_constraint (term X T) [X].

len [] 0.
len [_|XS] N :- len XS M, N is M + 1.

constraint term {
  rule
     \ (term (uvar K LX) _) (term (uvar _ LY) _)
     | (len LX N, len LY M, not(N = M))
   <=> (print "wrong arity" K, false).

  rule (GX ?- term (uvar _ LX) TX)
     \ (GY ?- term (uvar _ LY) TY)
     > LX ~ LY
     | (compatible GX LX GY LY CTXCONSTR)
   <=> (CTXCONSTR, TX = TY).

}

compatible _ [] _ [] true :- !.
compatible GX [X|XS] GY [Y|YS] (TX = TY, K) :-
 (GX => term X TX),
 (GY => term Y TY),
 !,
 compatible GX XS GY YS K.
compatible _ _ _ _ false.

main :-
  (term (lam x\ lam y\ app (app (F x y) x) y) T1, term (lam y\ lam x\ app (app (F x y) y) x) T2),
  (term (lam x \ X x) (arr A nat), term (lam x \ X x) (arr bool B)),
  not(term (lam x \ Y x) (arr C nat), term (lam x \ Y) (arr bool C)),
  not(term (lam x \ Z x) (arr nat nat), term (lam x \ Z x) (arr bool D)).

