mode (term i o).
term tt bool.
term ff bool.
term star unit.
term bool typ.
term nil (arr typ t\ app list t).
term cons (arr typ t\ arr t _\ arr (app list t) _\ app list t).
term (app HD ARG) TGT :- term HD (arr SRC TGT), term ARG SRC.
term (lam F) (arr SRC TGT) :- pi x\ term x SRC => term (F x) (TGT x).
term (?? as X) T :- declare_constraint (term X T) [X].

copy (app A B) (app A1 B1) :- !, copy A A1, copy B B1.
copy (lam F) (lam F1) :- !, pi x\ copy x x => copy (F x) (F1 x).
copy (arr A F) (arr A1 F1) :- !, copy A A1, pi x\ copy x x => copy (F x) (F1 x).
copy [] [] :- !.
copy [X|XS] [X1 | XS1] :- !, copy X X1, copy XS XS1.
copy (term A B) (term A1 B1) :- !, copy A A1, copy B B1.
copy (uvar K L) (uvar K L1 ) :- !, copy L L1.
copy X X.


map2 [] [] F [].
map2 [X|XS] [Y|YS] F [R|RS] :- F X Y R, map2 XS YS F RS.

constraint term {
  rule (EC : GC ?- term (uvar _ LC) TC) % canonical
     \ (EV : GV ?- term (uvar _ LV) TV)
     | (build-subst LC LV S, S => compat LC LV GC TC TV G)
   <=> (EV : GV ?- G).
}

mem X [X|_] :- !.
mem X [_|XS] :- mem X XS.

build-subst [X|XS] [Y|YS] [ (copy X Y :- !) | K] :- is_name X, (not (mem X XS)),
 build-subst XS YS K.
build-subst [] [] [].

compat [N|NS] [V|VS] CTX TC TV (G , K) :-
  CTX => term N T, copy T T1,
  G = term V T1,
  compat NS VS CTX TC TV K.
compat [] [] _ TC TV G :- copy TC TI, G = (TI = TV).


main :-
  (term (lam x\ lam y\ F x y) T),
  (term (F bool (app (app (app cons bool) tt) (app nil bool))) unit).
